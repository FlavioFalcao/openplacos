<div id="container" style="width:550px;height:400px;"></div>

<p> <button id="reset-btn">Reset</button>
    <button id="5_days">5 Days</button>
    <button id="1_day">1 Day</button>
    <button id="12_hours">12 Hours</button>
    <button id="5_hours">5 Hours</button>
    <button id="1_hour">1 Hour</button>
</p>

<script type="text/javascript"> 

document.observe('dom:loaded', function(){		

  /**
   * Global options object.
   */
   
  var options = {
    color: '#ff0000',
    mouse:{track:true},
		xaxis:{noTicks:10, tickDecimals:1},
    selection:{mode:'xy'},
    lines: {show: true,radius: 1},
    grid: {
            color: '#545454',	
            backgroundColor: '#ffffff',	
            tickColor: '#dddddd',	
            labelMargin: 3		
          }
  };
  
  
  /**
   * Function displays a graph in the 'container' element, extending
   * the global options object with the optionally passed options.
   */
  function drawGraph(opts,time){
    /**
     * Clone the options, so the 'options' variable always keeps intact.
     */
    
    var o = Object.extend(Object.clone(options), opts || {});
    var t = time || 1;
    /**
    
     * Return a new graph.
     */
    
    new Ajax.Request('<%=path%>.json', {
      method:'get',
      parameters: { time: t},
      onSuccess: function(transport){
        var json = transport.responseText.evalJSON();
        f = Flotr.draw($('container'),[json],o);	
      }
    });
    
  };
  /**
   * Actually draw the graph.
   */

  var f = drawGraph();			

  /**
   * Hook into the 'flotr:select' event.
   */
  $('container').observe('flotr:select', function(evt){
    /**
     * Get the selected area coordinates passed as event memo.
     */
    var area = evt.memo[0];
    
    /**
     * What happens: empty the container element, and draw a new 
     * graph with bounded axis. The axis correspond to the selection
     * you just made.
     */
    f = drawGraph({
      xaxis: {min:area.x1, max:area.x2},
      yaxis: {min:area.y1, max:area.y2}						
    });
  });

  /**
   * Observe click event on the reset-btn. Reset the graph when clicked.
   * The drawGraph function wrapped in another function otherwise it get's 
   * an Event object passed as first argument, while it expects an options
   * object.
   */
  $('reset-btn').observe('click', function(){drawGraph()});
  $('5_days').observe('click', function(){drawGraph({},120)});
  $('1_day').observe('click', function(){drawGraph({},24)});
  $('12_hours').observe('click', function(){drawGraph({},12)});
  $('5_hours').observe('click', function(){drawGraph({},5)});
  $('1_hour').observe('click', function(){drawGraph({},1)});  
}); 
            
</script> 
