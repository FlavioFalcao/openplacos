<div id="container" style="width:550px;height:400px;"></div>

<p> <button id="reset-btn">Reset</button>
    <button id="5_days">5 Days</button>
    <button id="1_day">1 Day</button>
    <button id="12_hours">12 Hours</button>
    <button id="5_hours">5 Hours</button>
    <button id="1_hour">1 Hour</button>
</p>

<script type="text/javascript"> 

document.observe('dom:loaded', function(){		

  /**
   * Global options object.
   */

  function myDateFormater(inputTimeStamp) {
    mydate = new Date();
    mydate.setTime(inputTimeStamp);
    return mydate.getUTCDate()+"/"+(mydate.getUTCMonth()+1)+" " + mydate.getUTCHours() + ":" + mydate.getUTCMinutes() + ":" + mydate.getUTCSeconds()
  }

  var options = {
    color: '#ff0000',
    mouse:{track:true},
    xaxis: { noTicks : 5, tickFormatter: myDateFormater},
    yaxis:{autoscaleMargin: 1},
    selection:{mode:'xy'},
    lines: {show: true,radius: 1},
    grid: {
            color: '#545454',	
            backgroundColor: '#ffffff',	
            tickColor: '#dddddd',	
            labelMargin: 3		
          }
  };
  
  
  /**
   * Function displays a graph in the 'container' element, extending
   * the global options object with the optionally passed options.
   */
  function drawGraph(opts,t1,t2){
    /**
     * Clone the options, so the 'options' variable always keeps intact.
     */
    
    var o = Object.extend(Object.clone(options), opts || {});
    /**var t1 = t1 || new Date();
    var t2 = t2 || new Date();
    */
    /**
    
     * Return a new graph.
     */
    
    new Ajax.Request('<%=path%>.json', {
      method:'get',
      parameters: { start_time: t1,end_time : t2},
      onSuccess: function(transport){
        var json = transport.responseText.evalJSON();
        f = Flotr.draw($('container'),[json],o);	
      }
    });
    
  };
  /**
   * Actually draw the graph.
   */

  var f = drawGraph();			

  /**
   * Hook into the 'flotr:select' event.
   */
  $('container').observe('flotr:select', function(evt){
    /**
     * Get the selected area coordinates passed as event memo.
     */
    var area = evt.memo[0];
    
    /**
     * What happens: empty the container element, and draw a new 
     * graph with bounded axis. The axis correspond to the selection
     * you just made.
     */
    f = drawGraph({
      xaxis: {min:area.x1, max:area.x2, noTicks : 5, tickFormatter: myDateFormater},
      yaxis: {min:area.y1, max:area.y2}						
    },area.x1/1000,area.x2/1000);
  });
  
  
  $('container').observe('flotr:click', function(evt){
    /**
     * Get the selected area coordinates passed as event memo.
     */
    var pos = evt.memo[0];
    alert(pos.x2);
    
    /**
     * What happens: empty the container element, and draw a new 
     * graph with bounded axis. The axis correspond to the selection
     * you just made.
     */
    f = drawGraph({
      xaxis: {min:pos.x-10000, max:pos.x+10000, noTicks : 5, tickFormatter: myDateFormater},
      yaxis: {min:pos.y-1, max:pos.y+1}						
    },(pos.x-10000)/1000 ,(pos.x+10000)/1000);
  });
  

  /**
   * Observe click event on the reset-btn. Reset the graph when clicked.
   * The drawGraph function wrapped in another function otherwise it get's 
   * an Event object passed as first argument, while it expects an options
   * object.
   */
  $('reset-btn').observe('click', function(){drawGraph()});
  $('5_days').observe('click', function(){drawGraph({},120)});
  $('1_day').observe('click', function(){drawGraph({},24)});
  $('12_hours').observe('click', function(){drawGraph({},12)});
  $('5_hours').observe('click', function(){drawGraph({},5)});
  $('1_hour').observe('click', function(){drawGraph({},1)});  
}); 

function handle(delta) {
        if (delta < 0)
  alert("pos");
        else
  alert("negatif");
}

/** Event handler for mouse wheel event.
 */
function wheel(event){
        var delta = 0;
        if (!event) /* For IE. */
                event = window.event;
        if (event.wheelDelta) { /* IE/Opera. */
                delta = event.wheelDelta/120;
                /** In Opera 9, delta differs in sign as compared to IE.
                 */
                if (window.opera)
                        delta = -delta;
        } else if (event.detail) { /** Mozilla case. */
                /** In Mozilla, sign of delta is different than in IE.
                 * Also, delta is multiple of 3.
                 */
                delta = -event.detail/3;
        }
        /** If delta is nonzero, handle it.
         * Basically, delta is now positive if wheel was scrolled up,
         * and negative, if wheel was scrolled down.
         */
        if (delta)
                handle(delta);
        /** Prevent default actions caused by mouse wheel.
         * That might be ugly, but we handle scrolls somehow
         * anyway, so don't bother here..
         */
        if (event.preventDefault)
                event.preventDefault();
	event.returnValue = false;
}

/** Initialization code. 
 * If you use your own event management code, change it as required.
 */
if ($('container').addEventListener)
        /** DOMMouseScroll is for mozilla. */
        $('container').addEventListener('DOMMouseScroll', wheel, false);
/** IE/Opera. */
$('container').onmousewheel =  wheel;

</script> 
